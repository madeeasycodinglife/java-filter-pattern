**Java Filter Pattern: Filtering Objects Based on Criteria**

The Filter Design Pattern is used to filter objects from a collection based on certain criteria. It allows you
to define multiple filtering conditions and apply them to a collection of objects to obtain a filtered result.

**Example:**

Here's an example of a filter pattern in Java that filters a list of persons based on different criteria:

  Persons Collection
       /   |   \
 Alice  Bob  Charlie
  /      /       \
Male   Female   Male
Single Married  Single



```java
import java.util.ArrayList;
import java.util.List;

// Person Class
class Person {
    private String name;
    private String gender;
    private String maritalStatus;

    public Person(String name, String gender, String maritalStatus) {
        this.name = name;
        this.gender = gender;
        this.maritalStatus = maritalStatus;
    }

    public String getName() {
        return name;
    }

    public String getGender() {
        return gender;
    }

    public String getMaritalStatus() {
        return maritalStatus;
    }
}

// Criteria Interface
interface Criteria {
    List<Person> meetCriteria(List<Person> persons);
}

// Concrete Criteria Implementations
class MaleCriteria implements Criteria {
    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        List<Person> malePersons = new ArrayList<>();
        for (Person person : persons) {
            if (person.getGender().equalsIgnoreCase("Male")) {
                malePersons.add(person);
            }
        }
        return malePersons;
    }
}

class SingleCriteria implements Criteria {
    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        List<Person> singlePersons = new ArrayList<>();
        for (Person person : persons) {
            if (person.getMaritalStatus().equalsIgnoreCase("Single")) {
                singlePersons.add(person);
            }
        }
        return singlePersons;
    }
}

// AndCriteria Implementation
class AndCriteria implements Criteria {
    private Criteria criteria1;
    private Criteria criteria2;

    public AndCriteria(Criteria criteria1, Criteria criteria2) {
        this.criteria1 = criteria1;
        this.criteria2 = criteria2;
    }

    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        List<Person> firstCriteriaPersons = criteria1.meetCriteria(persons);
        return criteria2.meetCriteria(firstCriteriaPersons);
    }
}

// Client Code
public class FilterPatternExample {
    public static void main(String[] args) {
        List<Person> persons = new ArrayList<>();
        persons.add(new Person("Alice", "Female", "Single"));
        persons.add(new Person("Bob", "Male", "Married"));
        persons.add(new Person("Charlie", "Male", "Single"));

        Criteria maleCriteria = new MaleCriteria();
        Criteria singleCriteria = new SingleCriteria();
        Criteria singleMaleCriteria = new AndCriteria(singleCriteria, maleCriteria);

        List<Person> singleMales = singleMaleCriteria.meetCriteria(persons);
        for (Person person : singleMales) {
            System.out.println("Name: " + person.getName() + ", Gender: " + person.getGender() + ", Marital Status: " + person.getMaritalStatus());
        }
    }
}
```

**How to Identify When to Apply the Filter Design Pattern:**

1. **Multiple Criteria:** When you need to filter a collection of objects based on multiple criteria.

2. **Modular Filtering:** If you want to separate the filtering logic from the main business logic to make it more modular.

3. **Dynamic Filtering:** When you need to apply filtering dynamically based on different conditions.

**Where to Apply the Filter Design Pattern:**

- **Searching and Filtering:** In scenarios where you need to search and filter data from a collection based on various conditions.

- **User Interface:** In user interfaces where you need to display or manage lists of items and allow users to apply filters.

- **Data Processing:** When processing large amounts of data and you need to extract specific subsets based on different criteria.

- **Reports Generation:** Generating reports that require filtering data based on different parameters.

By applying the Filter Design Pattern, you can create flexible and extensible filtering mechanisms that allow you to
extract specific subsets of data from a collection based on various conditions or criteria.
